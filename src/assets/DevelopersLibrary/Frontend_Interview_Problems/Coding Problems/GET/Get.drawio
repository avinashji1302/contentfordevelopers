<mxfile host="65bd71144e">
    <diagram id="ZYOhYKRKFk68G_IkOBOU" name="Page-1">
        <mxGraphModel dx="991" dy="949" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="2" value="&lt;div style=&quot;color: rgb(212 , 212 , 212) ; background-color: rgb(30 , 30 , 30) ; font-family: &amp;#34;menlo&amp;#34; , &amp;#34;monaco&amp;#34; , &amp;#34;courier new&amp;#34; , monospace ; font-weight: normal ; font-size: 12px ; line-height: 18px&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #c586c0&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #c586c0&quot;&gt;default&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #dcdcaa&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;objectParam&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;pathParam&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;defaultValue&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;&amp;nbsp; const&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;path&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; = &lt;/span&gt;&lt;span style=&quot;color: #4ec9b0&quot;&gt;Array&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #dcdcaa&quot;&gt;isArray&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;pathParam&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;) ? &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;pathParam&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; : &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;pathParam&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #dcdcaa&quot;&gt;split&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ce9178&quot;&gt;'.'&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;);&lt;/span&gt;&lt;span style=&quot;color: #6a9955&quot;&gt;// The first step is to split up the path by the delimiter, which is a period. &lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;&amp;nbsp; let&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;index&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; = &lt;/span&gt;&lt;span style=&quot;color: #b5cea8&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;&amp;nbsp; let&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;length&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; = &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;path&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;length&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;&amp;nbsp; let&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;object&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; = &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;objectParam&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #c586c0&quot;&gt;&amp;nbsp; while&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;object&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; != &lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &amp;amp;&amp;amp; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;index&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &amp;lt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;length&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;) {&lt;/span&gt;&lt;span style=&quot;color: #6a9955&quot;&gt;// Then we have to recursively traverse the object given each tokens in the path, &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;&amp;nbsp; &amp;nbsp; object&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; = &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;object&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #4ec9b0&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;path&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;index&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;])]; &lt;/span&gt;&lt;span style=&quot;color: #6a9955&quot;&gt;// which can be done either with while/for loops or recursions. The looping should stop when a null-ish value is occurred.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;&amp;nbsp; &amp;nbsp; index&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;++;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;&amp;nbsp; }&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;&amp;nbsp; const&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; = &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;index&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &amp;amp;&amp;amp; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;index&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; === &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;length&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; ? &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;object&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; : &lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;undefined&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #c586c0&quot;&gt;&amp;nbsp; return&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; !== &lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;undefined&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; ? &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; : &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;defaultValue&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
                    <mxGeometry x="10" y="420" width="750" height="660" as="geometry"/>
                </mxCell>
                <mxCell id="3" value="&lt;div style=&quot;color: rgb(212 , 212 , 212) ; font-family: &amp;#34;menlo&amp;#34; , &amp;#34;monaco&amp;#34; , &amp;#34;courier new&amp;#34; , monospace ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px&quot;&gt;&lt;span style=&quot;color: rgb(106 , 153 , 85)&quot;&gt;// PROBLEM&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(212 , 212 , 212) ; font-family: &amp;#34;menlo&amp;#34; , &amp;#34;monaco&amp;#34; , &amp;#34;courier new&amp;#34; , monospace ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px&quot;&gt;&lt;span style=&quot;color: rgb(106 , 153 , 85)&quot;&gt;// Before the optional chaining operator (?.) existed, it was sometimes troublesome to access deeply-nested properties in huge JavaScript objects when some of the intermediate properties might not be present.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;br style=&quot;color: rgb(212 , 212 , 212) ; font-family: &amp;#34;menlo&amp;#34; , &amp;#34;monaco&amp;#34; , &amp;#34;courier new&amp;#34; , monospace ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px&quot;&gt;&lt;div style=&quot;color: rgb(212 , 212 , 212) ; font-family: &amp;#34;menlo&amp;#34; , &amp;#34;monaco&amp;#34; , &amp;#34;courier new&amp;#34; , monospace ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px&quot;&gt;&lt;span style=&quot;color: rgb(106 , 153 , 85)&quot;&gt;// SOLUTION&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(212 , 212 , 212) ; font-family: &amp;#34;menlo&amp;#34; , &amp;#34;monaco&amp;#34; , &amp;#34;courier new&amp;#34; , monospace ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px&quot;&gt;&lt;span style=&quot;color: rgb(106 , 153 , 85)&quot;&gt;// 1. The first step is to split up the path by the delimiter, which is a period.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(212 , 212 , 212) ; font-family: &amp;#34;menlo&amp;#34; , &amp;#34;monaco&amp;#34; , &amp;#34;courier new&amp;#34; , monospace ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px&quot;&gt;&lt;span style=&quot;color: rgb(106 , 153 , 85)&quot;&gt;// 2. Then we have to recursively traverse the object given each tokens in the path,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(106 , 153 , 85)&quot;&gt;which can be done either with while/for loops or recursions. The looping should stop when a null-ish value is occurred.&lt;/span&gt;&lt;/div&gt;&lt;br style=&quot;color: rgb(212 , 212 , 212) ; font-family: &amp;#34;menlo&amp;#34; , &amp;#34;monaco&amp;#34; , &amp;#34;courier new&amp;#34; , monospace ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px&quot;&gt;&lt;div style=&quot;color: rgb(212 , 212 , 212) ; font-family: &amp;#34;menlo&amp;#34; , &amp;#34;monaco&amp;#34; , &amp;#34;courier new&amp;#34; , monospace ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px&quot;&gt;&lt;span style=&quot;color: rgb(106 , 153 , 85)&quot;&gt;// Array index accessing doesn't require special handling and can be treated like accessing string-based fields on objects.&lt;/span&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;fillColor=#1A1A1A;fontColor=#ffffff;strokeColor=#314354;" vertex="1" parent="1">
                    <mxGeometry x="10" y="190" width="550" height="230" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>